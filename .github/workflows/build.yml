name: Android CI

# set up launch on push to master branch
on:
  push:
    branches: [ "master" ]

# init list of jobs
jobs:
  # job for app building with Gradle
  build_test_upload:
    name: Test, build apk and aab, upload
    runs-on: ubuntu-latest
    # set env variables
    env:
      # path to apk
      apk: app/build/outputs/apk/release/app-release.apk
      # path to aab
      apkDebug: app/build/outputs/apk/debug/app-debug.apk
      # vars for app signing
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

    steps:
      # get repository
      - uses: actions/checkout@v3
      # set java env
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # build and run tests of app
      - name: Test with Gradle
        run: ./gradlew test

      # create APK and AAB
      - name: Create signed .apk
        run: |
           ./gradlew assembleRelease
           ./gradlew assembleDebug
           ./gradlew assembleDebugAndroidTest

      # upload apk
      - name: Upload signed .apk
        uses: actions/upload-artifact@v3
        with:
           name: app-release
           path: ${{ env.apk }}

      # upload aab
      - name: Upload apkDebug
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: ${{ env.apkDebug }}

      # upload test apk
      - name: Upload app-debug-androidTest APK
        uses: actions/upload-artifact@v2
        with:
          name: app-debug
          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  docker:
    name: Build docker image
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        run: docker build -t tic-tac-toe:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        run: |
          docker tag tic-tac-toe:latest shmatozz/tic-tac-toe
          docker push ${{ secrets.DOCKER_USERNAME }}/tic-tac-toe:latest

      - name: Run the application
        run: docker run -t tic-tac-toe:latest

  # job for sending APK and AAB artefacts to Firebase server
  send_to_firebase:
    name: Send .apk to Firebase testers group
    # requires .apk build before uploading
    needs: build_test_upload
    runs-on: ubuntu-latest

    steps:
      # download artefacts
      - uses: actions/download-artifact@v3
        with:
            name: app-release

      # send to Firebase
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.5.0
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: app-release.apk

  run_ui_tests_on_firebase:
    runs-on: ubuntu-latest
    needs: build_test_upload
    steps:
      - uses: actions/checkout@v3
      - name: Download app-debug APK
        uses: actions/download-artifact@v3
        with:
          name: app-debug

      - name: Login to Google Cloud
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.FIREBASE_KEY }}

      - name: Set current project
        run: gcloud config set project ${{ secrets.FIREBASE_APP_ID }}

      - name: Run Instrumentation Tests in Firebase Test Lab
        env:
          APP_DEBUG_LOCATION: app-debug.apk
          ANDROID_TEST_LOCATION: app-debug-androidTest.apk
          DEVICE_MODEL: redfin,version=30,locale=en,orientation=portrait
        run: |
          gcloud firebase test android models list
          gcloud firebase test android run --type robo --app $APP_DEBUG_LOCATION --device model=$DEVICE_MODEL --num-flaky-test-attempts 2

  # job for sending message to telegram project chat about commit
  send_telegram:
    name: Send message to TG chat about commit to master
    # requires .apk build before uploading
    needs: build_test_upload
    runs-on: ubuntu-latest
    steps:
      # download artefacts
      - uses: actions/download-artifact@v3
        with:
          name: app-release

      # send to tg chat with bot
      - name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          # add .apk to message
          document: app-release.apk
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
